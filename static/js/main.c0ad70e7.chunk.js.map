{"version":3,"sources":["utils/Web3.js","utils/Accounts.js","utils/Contracts.js","components/Landing.js","components/Predict.js","components/Routes.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["createInstance","a","providerOptions","createProviderOptions","web3Modal","createModal","provider","connect","console","log","web3","Web3","eth","getAccounts","accounts","setGlobals","walletconnect","package","WalletConnectProvider","options","infuraId","Web3Modal","network","cacheProvider","theme","background","main","secondary","border","hover","getInstance","web3Instance","getGlobal","setGlobal","getCurrentAccount","Web3Util","isSettingsShowing","mainnetPrediction","versusContract","toggleSettings","settingOp","getPredictionContractInstance","window","predictionCI","instance","Contract","Prediction","abi","getVersusContractInstance","nyanCI","versusCI","Versus","getVersusERCContractInstance","ERCCI","ERC20","getVersusMarkets","Accounts","methods","getMarkets","call","markets","getMarketDetails","market","marketDetails","getUserPrediction","account","userPrediction","getCurrentPairPrice","pair","getLatestPrice","price","makePrediction","amount","isLonging","predict","send","from","value","expireMarket","expire","closePrediction","isEligibleForClaim","isNyanEligible","claimVersus","claimNyanVersus","getVersusBalance","balanceOf","Component","Predict","state","myVersusBalance","myETHBalance","userHasPrediction","userPredictionExp","userPredictionPair","userPredictionPrice","userPredictionPosition","currentBlock","componentDidMount","providers","HttpProvider","myAccount","utils","getBalance","fromWei","Contracts","setState","marketsWithDetails","i","length","details","push","address","name","startblock","endblock","currentround","targetprice","ETHLong","ETHShort","getBlockNumber","hasUserPredicted","index","direction","document","getElementById","toWei","toString","closeUserPrediction","isUserWinning","isWinning","split","arr","className","formatPrice","onClick","id","placeholder","type","this","target","href","populateMarkets","Routes","props","useGlobal","exact","path","component","Header","useState","setAccount","isShowingSettings","useEffect","init","to","class","substring","App","Container","fluid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c0ad70e7.chunk.js","sourcesContent":["//import Web3 from \"web3\";\r\n//https://github.com/CharlesStover/reactn\r\nimport Web3 from \"web3\";\r\nimport Web3Modal from \"web3modal\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport { setGlobal, getGlobal } from 'reactn';\r\n\r\n\r\n /**\r\n  * Check to see if there's a web3 instance to use\r\n  */\r\n \r\nconst createInstance = async() => {\r\n\r\n  const providerOptions = createProviderOptions()\r\n  const web3Modal = createModal(providerOptions)\r\n  \r\n  // check if current instance is present\r\n  let provider = false;\r\n    try {\r\n      provider = await web3Modal.connect();\r\n    } catch (exception){\r\n      console.log('exception thrown while instantiating web3modal');\r\n      console.log(exception)\r\n      return false\r\n    }\r\n\r\n    const web3 = new Web3(provider);\r\n    const accounts = await web3.eth.getAccounts();\r\n    setGlobals(web3, accounts, web3Modal);\r\n  \r\n    return web3;\r\n}\r\n\r\nconst createProviderOptions = () => {\r\n  const providerOptions = {\r\n    walletconnect: {\r\n      package: WalletConnectProvider, // required\r\n      options: {\r\n        infuraId: \"83301e4b4e234662b7769295c0f4a2e1\" // required\r\n      }\r\n    }\r\n  };\r\n  return providerOptions\r\n}\r\n\r\nconst createModal = (providerOptions) => {\r\n  const web3Modal = new Web3Modal({\r\n    network: \"mainnet\", // optional\r\n    cacheProvider: true, // optional\r\n    providerOptions, // required,\r\n    theme: {\r\n      background: \"rgb(253, 250, 250)\",\r\n      main: \"rgb(33, 37, 41)\",\r\n      secondary: \"rgb(136, 136, 136)\",\r\n      border: \"rgba(195, 195, 195, 0.14)\",\r\n      hover: \"rgb(252,163,220)\"\r\n    }\r\n  });\r\n  return web3Modal;\r\n}\r\n\r\nconst getInstance = async() => {\r\n    const web3Instance = getGlobal().web3Instance;    \r\n    if(!web3Instance){\r\n      return await createInstance();\r\n    }\r\n    return web3Instance\r\n}\r\n\r\nconst setGlobals = (web3, accounts, web3Modal) => {\r\n  setGlobal({\r\n    web3Instance: web3,\r\n    accounts: accounts,\r\n    web3Modal: web3Modal\r\n  });\r\n}\r\n\r\n// Export each function\r\nexport {\r\n  createInstance,\r\n  getInstance\r\n  //checkWeb3IsPresent,\r\n  //getAccounts,\r\n  //getNetworkId\r\n};\r\n\r\n","/** All interations with the contracts */\r\nimport Web3 from \"web3\";\r\nimport { getGlobal } from 'reactn';\r\nimport { Web3Util } from './index';\r\n\r\nconst getCurrentAccount = async() => {\r\n    const accounts = getGlobal().accounts;\r\n    if(!accounts){\r\n        let web3 = await Web3Util.getInstance()\r\n        if(web3){\r\n            let accounts = await web3.eth.getAccounts();\r\n            return accounts[0];\r\n        }\r\n    }\r\n    if (accounts) {\r\n        return accounts[0];\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n// Export each function\r\nexport {\r\n    getCurrentAccount\r\n };","import { Web3Util, Accounts } from './index';\r\nimport ERC20 from \"../contracts/ERC20.json\";\r\nimport Prediction from \"../contracts/Prediction.json\";\r\n// import Nyan from \"../contracts/Nyan.json\";\r\nimport Versus from \"../contracts/Versus.json\";\r\n\r\nlet isSettingsShowing = false;\r\nlet kovanPrediction = \"0xD1941ABd389b5Ca4EbdA34c987a4d1245909F45c\";\r\nlet mainnetPrediction = \"0x147b568A032B520B93fD0680BD295761eDA9fc5f\"\r\nlet nyanContract = \"0xbF4a9A37EcFc21825011285222c36aB35De51F14\";\r\nlet versusContract = \"0x0032983c554f08fD21675DBC83E323cc7Cf2c3fe\";\r\n\r\nasync function toggleSettings() {\r\n    if (isSettingsShowing) {\r\n        isSettingsShowing = false;\r\n    } else {\r\n        isSettingsShowing = true;\r\n    }\r\n}\r\n\r\nasync function settingOp() {\r\n    return isSettingsShowing;\r\n}\r\n\r\nasync function getPredictionContractInstance(){\r\n    if(!window.predictionCI) {\r\n        \r\n    }\r\n    const instance = await Web3Util.getInstance();\r\n    window.predictionCI = new instance.eth.Contract(\r\n        Prediction.abi,\r\n        mainnetPrediction\r\n    );\r\n    return window.predictionCI\r\n}\r\n\r\n// async function getNyanContractInstance(){\r\n//     if(!window.nyanCI) {\r\n        \r\n//     }\r\n//     const instance = await Web3Util.getInstance();\r\n//     window.nyanCI = new instance.eth.Contract(\r\n//         Nyan.abi,\r\n//         nyanContract\r\n//     );\r\n//     return window.nyanCI\r\n// }\r\n\r\nasync function getVersusContractInstance(){\r\n    if(!window.nyanCI) {\r\n        \r\n    }\r\n    const instance = await Web3Util.getInstance();\r\n    window.versusCI = new instance.eth.Contract(\r\n        Versus.abi,\r\n        versusContract\r\n    );\r\n    return window.versusCI\r\n}\r\n\r\nasync function getVersusERCContractInstance(){\r\n    const instance = await Web3Util.getInstance();\r\n    window.ERCCI = new instance.eth.Contract(\r\n        ERC20.abi,\r\n        versusContract\r\n    );\r\n    return window.ERCCI\r\n}\r\n\r\nasync function getVersusMarkets(){\r\n    let account = await Accounts.getCurrentAccount();\r\n    let instance = await getPredictionContractInstance();\r\n\r\n    let markets = await instance.methods.getMarkets().call();\r\n    return markets;\r\n}\r\n\r\nasync function getMarketDetails(market){\r\n    let account = await Accounts.getCurrentAccount();\r\n    let instance = await getPredictionContractInstance();\r\n\r\n    let marketDetails = await instance.methods.getMarketDetails(market).call();\r\n    return marketDetails;\r\n}\r\n\r\nasync function getUserPrediction() {\r\n    let account = await Accounts.getCurrentAccount();\r\n    let instance = await getPredictionContractInstance();\r\n    let userPrediction = await instance.methods.userPrediction(account).call();\r\n    return userPrediction;\r\n}\r\n\r\nasync function getCurrentPairPrice(pair) {\r\n    let instance = await getPredictionContractInstance();\r\n    let price = await instance.methods.getLatestPrice(pair).call();\r\n    return price;\r\n}\r\n\r\nasync function makePrediction(pair, amount, isLonging) {\r\n    let account = await Accounts.getCurrentAccount();\r\n    let instance = await getPredictionContractInstance();\r\n    await instance.methods.predict(pair, isLonging).send({\r\n        from: account,\r\n        value: amount\r\n    });\r\n}\r\n\r\nasync function expireMarket(pair) {\r\n    let account = await Accounts.getCurrentAccount();\r\n    let instance = await getPredictionContractInstance();\r\n    await instance.methods.expire(pair).send({\r\n        from: account,\r\n    })\r\n}\r\n\r\nasync function closePrediction() {\r\n    let account = await Accounts.getCurrentAccount();\r\n    let instance = await getPredictionContractInstance();\r\n    await instance.methods.closePrediction().send({\r\n        from: account\r\n    })\r\n}\r\n\r\nasync function isEligibleForClaim() {\r\n    let account = await Accounts.getCurrentAccount();\r\n    let instance = await getVersusContractInstance();\r\n    return await instance.methods.isNyanEligible(account).call();\r\n}\r\n\r\nasync function claimVersus() {\r\n    let account = await Accounts.getCurrentAccount();\r\n    let instance = await getVersusContractInstance();\r\n    return await instance.methods.claimNyanVersus().send({\r\n        from: account\r\n    });\r\n}\r\n\r\nasync function getVersusBalance() {\r\n    let account = await Accounts.getCurrentAccount();\r\n    let instance = await getVersusERCContractInstance();\r\n    return await instance.methods.balanceOf(account).call();\r\n}\r\n\r\n\r\n  export {\r\n    getVersusMarkets,\r\n    getMarketDetails,\r\n    getUserPrediction,\r\n    getCurrentPairPrice,\r\n    makePrediction,\r\n    expireMarket,\r\n    closePrediction,\r\n    isEligibleForClaim,\r\n    claimVersus,\r\n    getVersusBalance,\r\n    isSettingsShowing,\r\n    toggleSettings,\r\n    settingOp\r\n}","import React, { useEffect, useState, Component } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Row, Col, Image, Badge } from 'react-bootstrap';\r\nimport { Web3Util, Accounts, Contracts } from '../utils/index';\r\n\r\n\r\nimport Web3 from \"web3\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\n\r\nexport default class Landing extends Component {\r\n\r\n\r\n    componentDidMount = async () => {\r\n\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <div className=\"enter-versus\">Get in here!</div>\r\n                <div className=\"more-info\">More Info</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// export default Landing;","import React, { useEffect, useState, Component } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Row, Col, Image, Badge } from 'react-bootstrap';\r\nimport { Web3Util, Accounts, Contracts } from '../utils/index';\r\n// import ERC20 from \"../contracts/ERC20.json\";\r\n\r\n\r\nimport Web3 from \"web3\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\n\r\nexport default class Predict extends Component {\r\n    state = {\r\n        myVersusBalance: 0,\r\n        myETHBalance: 0,\r\n        userHasPrediction: false,\r\n        userPredictionExp: 0,\r\n        userPredictionPair: \"\",\r\n        userPredictionPrice: 0,\r\n        userPredictionPosition: false, \r\n        markets: [],\r\n        currentBlock: 0,\r\n        isNyanEligible: false\r\n    };\r\n    \r\n    componentDidMount = async () => {\r\n        var web3 = new Web3(new Web3.providers.HttpProvider(\r\n            'https://mainnet.infura.io/v3/6162d64a9204425eb2dbe20e893c85d0'\r\n        ));\r\n        let myAccount = await Accounts.getCurrentAccount();\r\n        console.log(myAccount);\r\n        if (!myAccount) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            myETHBalance: web3.utils.fromWei(await web3.eth.getBalance(myAccount)),\r\n            myVersusBalance: web3.utils.fromWei(await Contracts.getVersusBalance())\r\n        });\r\n\r\n        try {\r\n            let markets = await Contracts.getVersusMarkets();\r\n            let marketsWithDetails = [];\r\n            for (let i = 0; i < markets.length; i++) {\r\n                let details = await Contracts.getMarketDetails(markets[i]);\r\n\r\n                marketsWithDetails.push({\r\n                address:  markets[i],\r\n                name: details[6],\r\n                startblock: details[0],\r\n                endblock: details[1],\r\n                currentround: details[2],\r\n                targetprice: details[3],\r\n                ETHLong: web3.utils.fromWei(details[4]),\r\n                ETHShort: web3.utils.fromWei(details[5])\r\n                });\r\n            }\r\n            this.setState({markets: marketsWithDetails});\r\n            this.setState({currentBlock: await web3.eth.getBlockNumber()});\r\n            await this.hasUserPredicted();\r\n        } catch {\r\n\r\n        }\r\n\r\n        this.setState({isNyanEligible: await Contracts.isEligibleForClaim()});\r\n    }\r\n\r\n    claimNyanVersus = async () => {\r\n        await Contracts.claimVersus();\r\n        this.setState({isNyanEligible: false});\r\n    }\r\n\r\n    formatPrice(name, price) {\r\n        var web3 = new Web3(new Web3.providers.HttpProvider(\r\n            'https://kovan.infura.io/v3/6162d64a9204425eb2dbe20e893c85d0'\r\n        ));\r\n\r\n        if (name.split('/')[1] == \" ETH\") {\r\n            return web3.utils.fromWei(price.toString()) + \" ETH\";\r\n        }\r\n    }\r\n\r\n    populateMarkets() {\r\n        let arr = [];\r\n        for (let i = 0; i < this.state.markets.length; i++) {\r\n            arr.push(\r\n                <div className=\"each-market\">\r\n                    <div className=\"market-name\">{this.state.markets[i].name}</div>\r\n                    <div className=\"market-target\">\r\n                        Target Price: \r\n                        <span className=\"target-price\">\r\n                            {this.formatPrice(this.state.markets[i].name, this.state.markets[i].targetprice)}\r\n                        </span>\r\n                    </div>\r\n\r\n                    {this.state.currentBlock > this.state.markets[i].endblock ?\r\n                        <div onClick={() => this.expireMarket(this.state.markets[i].address)} className=\"market-expired\">Expire!</div>\r\n                        :\r\n                        <div className=\"market-expiration\">Expires in: {this.state.markets[i].endblock - this.state.currentBlock} blocks</div>\r\n                    }\r\n\r\n                    <div className=\"predict-container\">\r\n                        <div className=\"short-box\">\r\n                            <input id={\"short-input-\" + i} placeholder=\"Enter ETH to stake\" type=\"number\" className=\"predict-input\">\r\n\r\n                            </input>\r\n                            <div onClick={() => this.makePrediction(i, this.state.markets[i].address, 'short')} id={\"short-button-\" + i} className=\"short-button\">SHORT</div>\r\n                            <div className=\"ETH-pooled\">{this.state.markets[i].ETHShort} ETH pooled</div>\r\n                        </div>\r\n                        <div className=\"long-box\">\r\n                            <input id={\"long-input-\" + i} placeholder=\"Enter ETH to stake\" type=\"number\" className=\"predict-input\">\r\n\r\n                            </input>\r\n                            <div onClick={() => this.makePrediction(i, this.state.markets[i].address, 'long')} id={\"long-button-\" + i} className=\"short-button\">LONG</div>\r\n                            <div className=\"ETH-pooled\">{this.state.markets[i].ETHLong} ETH pooled</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    makePrediction = async (index, pair, direction) => {\r\n        let web3 = new Web3();\r\n        if (direction == 'long') {\r\n            let amount = document.getElementById('long-input-'+index).value;\r\n            Contracts.makePrediction(pair, web3.utils.toWei(amount.toString()), true);\r\n        } else {\r\n            let amount = document.getElementById('short-input-'+index).value;\r\n            Contracts.makePrediction(pair, web3.utils.toWei(amount.toString()), false);\r\n        }\r\n    }\r\n\r\n    expireMarket = async (pair) => {\r\n        Contracts.expireMarket(pair);\r\n    }\r\n\r\n    closeUserPrediction = async () => {\r\n        Contracts.closePrediction();\r\n    }\r\n\r\n    isUserWinning = async () => {\r\n        let isWinning = false;\r\n        let price = await Contracts.getCurrentPairPrice(this.state.userPredictionPair);\r\n        if (price > this.state.userPredictionPrice) {\r\n            if (!this.state.userPredictionPosition) {\r\n                isWinning = true;\r\n            }\r\n        } else {\r\n            if (this.state.userPredictionPosition) {\r\n                isWinning = true;\r\n            }\r\n        }\r\n        return isWinning;\r\n    }\r\n\r\n    hasUserPredicted = async () => {\r\n        let userPrediction = await Contracts.getUserPrediction();\r\n        if (userPrediction[0] === \"0x0000000000000000000000000000000000000000\") {\r\n            this.setState({userHasPrediction: false})\r\n        } else {\r\n            this.setState({userHasPrediction: true, \r\n                           userPredictionPair: userPrediction[0], \r\n                           userPredictionExp: userPrediction[5],\r\n                           userPredictionPosition: userPrediction[4]})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"predict-body\">\r\n                {this.state.isNyanEligible ?\r\n                    <div className=\"nyan-claim-container\">\r\n                        <div className=\"nyan-detected\">Your address either holds Nyan-2 or stakes Nyan-2 LP. Claiming Versus locks your Nyan token and LP movement for ~2 weeks.</div>\r\n                        <div className=\"claim-nyan-versus\" onClick={() => this.claimNyanVersus()}>CLAIM</div>\r\n\r\n                    </div>\r\n                    :\r\n                    null\r\n                }\r\n                <div className=\"my-versus\">\r\n                    My Versus: {this.state.myVersusBalance}\r\n                </div>\r\n                <div className=\"my-ETH\">ETH in Wallet: {this.state.myETHBalance}</div>\r\n                <a className=\"profit-href\" target=\"_blank\" href=\"https://nyanfinance.medium.com/versus-decentralized-price-prediction-markets-91a88fcbc0aa\">\r\n                    <div className=\"how-to-profit\">What is Versus?</div>\r\n                </a>\r\n\r\n                <h2 className=\"market-header\">Markets</h2>\r\n                <div className=\"divider\"></div>\r\n\r\n                {this.state.markets.length == 0 ?\r\n                    <div>\r\n                        <div className=\"reload\">After connecting, reload your page</div>\r\n                        <div className=\"reload\">Currently live on the Kovan testnet</div>\r\n                    </div>\r\n                    :\r\n                    null\r\n                }\r\n\r\n                {this.state.userHasPrediction ?\r\n                    <div className=\"each-market\">\r\n                        <div className=\"market-name\">My Active Prediction</div>\r\n                        <div className=\"market-name\">Pair Name: ETH/???</div>\r\n                        <div className=\"market-target\">Target Price: <span className=\"target-price\">$0</span></div>\r\n                        {this.state.currentBlock > this.state.userPredictionExp ?\r\n                            <div className=\"market-expired\">Expire!</div>\r\n                            :\r\n                            <div className=\"market-expiration\">Expires in: {this.state.userPredictionExp-this.state.currentBlock} blocks</div>\r\n                        }\r\n                        <div className=\"prediction-status\">\r\n                            {this.isUserWinning() ?\r\n                                <div className=\"user-winning\">\r\n                                    <div className=\"p-s-text\">Currently Winning!</div>\r\n                                </div>\r\n                                :\r\n                                <div className=\"user-losing\">\r\n                                    <div className=\"p-s-text\">Currently Losing</div>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    null\r\n                }\r\n\r\n                {this.populateMarkets()}\r\n     \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// export default Landing;","import React from \"react\";\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport Landing from \"./Landing\";\r\nimport Predict from \"./Predict\";\r\n\r\nimport { useGlobal } from 'reactn';\r\n\r\nconst Routes = (props) => {\r\n    \r\n    const [ web3Instance ] = useGlobal('web3Instance');\r\n    \r\n    return (\r\n            <div className=\"application-body\">\r\n                <Route exact path='/' component={Predict}/>\r\n                <Route exact path='/predict' component={Predict}/>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Routes","import React, {useEffect, useState} from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Row, Col, Image, Nav, Navbar, Button } from 'react-bootstrap';\r\nimport { Web3Util, Accounts, Contracts } from '../utils/index';\r\n\r\nimport { useGlobal } from 'reactn';\r\n\r\nimport '../style/Header.css';\r\nimport '../style/App.css';\r\nimport { isSettingsShowing } from \"../utils/Contracts\";\r\n\r\nconst Header = (props) => {\r\n\r\n    const [ web3Instance ] = useGlobal('web3Instance');\r\n    // const [isEligibleForNyanV1toV2Swap, setIsEligibleForV1ToV2Swap] = useState(false);\r\n    // const [isLGEOver, setIsLGEOver] = useState(false);\r\n    // const [nyanBalance, setNyanBalance]  = useState(0);\r\n    let [account, setAccount] = useState(0);\r\n    let isShowingSettings = false;\r\n\r\n    // init staking page\r\n    useEffect(() => {\r\n        // only fires whenever requestConnectionToWallet is updated.\r\n        async function init() {\r\n            connect();\r\n            // setNyanBalance(await Balances.getMyNyanBalance());  \r\n            // setIsEligibleForV1ToV2Swap(true);\r\n            // setIsLGEOver(Swap.getLGEBool());\r\n            // console.log(isEligibleForNyanV1toV2Swap)\r\n            if (web3Instance) {\r\n                let account = await Accounts.getCurrentAccount();\r\n            }\r\n            \r\n        }\r\n        init()\r\n    }, []);\r\n\r\n    function toggleSettings() {\r\n        // console.log(Contracts);\r\n        // Contracts.toggleSettings();\r\n        // isShowingSettings = Contracts.isSettingsShowing;\r\n        // console.log(isShowingSettings);\r\n        isShowingSettings = !isShowingSettings;\r\n    }\r\n\r\n    async function connect() {\r\n        let instance = await Web3Util.createInstance();\r\n        if (instance) {\r\n            setAccount(await Accounts.getCurrentAccount());\r\n        }\r\n    }\r\n\r\n    function disconnectWallet() {\r\n        // account = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"nav-bg\">\r\n            <h1 className=\"site-title\">\r\n                <Link to=\"/\" className=\"router-link\">\r\n                    Versus\r\n                </Link>\r\n            </h1>\r\n            <div class=\"price-feeds\">Price feeds by Chainlink</div>\r\n\r\n            {/* <div onClick={() => toggleSettings()} className=\"site-settings-icon\"></div> */}\r\n            \r\n            {isShowingSettings ?\r\n                <div className=\"settings-container\">\r\n                    <div className=\"settings-chain-c\">\r\n                        <div className=\"settings-chain\">\r\n                            Select Chain:\r\n                            <div className=\"settings-chain-option\">\r\n                                ETHEREUM\r\n                            </div>\r\n                            <div className=\"settings-chain-option\">\r\n                                BINANCE SMART CHAIN (soon)\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"settings-chain-c\">\r\n                        <div className=\"settings-chain\">\r\n                            Select Network:\r\n                            <div className=\"settings-chain-option\">\r\n                                Mainnet\r\n                            </div>\r\n                            <div className=\"settings-chain-option\">\r\n                                Testnet\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                :\r\n                null\r\n            }\r\n\r\n            {\r\n                account ?\r\n                <div className=\"menu-icon\">\r\n                    Wallet:...{account.substring(account.length - 8)}\r\n                    <div onClick={()=> disconnectWallet()} className=\"disconnect\"></div>\r\n                </div>\r\n                :\r\n                <div onClick={() => connect()} className=\"menu-icon\">Connect To Wallet</div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\n\n\nimport Routes from \"./components/Routes.js\";\nimport Header from \"./components/Header\";\n\nimport './style/App.css';\n\nconst App = () => {\n\n  return (\n        \n    <Container fluid>\n      {/* <Favicon/> */}\n      <Router>\n          <Header/>\n          {/* <TickerComponent/> */}\n          <Routes/>\n          {/* <Footer/> */}\n      </Router>\n    </Container>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}